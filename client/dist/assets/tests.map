{"version":3,"sources":["vendor/ember-cli/tests-prefix.js","working-aperture/tests/app.lint-test.js","working-aperture/tests/helpers/destroy-app.js","working-aperture/tests/helpers/module-for-acceptance.js","working-aperture/tests/helpers/start-app.js","working-aperture/tests/integration/components/nav-bar-test.js","working-aperture/tests/integration/components/portfolio-projects-test.js","working-aperture/tests/integration/components/site-footer-test.js","working-aperture/tests/test-helper.js","working-aperture/tests/tests.lint-test.js","working-aperture/tests/unit/adapters/user-test.js","working-aperture/tests/unit/controllers/recent-works-test.js","working-aperture/tests/unit/models/user-test.js","working-aperture/tests/unit/routes/index-test.js","working-aperture/tests/unit/routes/order-options-test.js","working-aperture/tests/unit/routes/recent-works-test.js","working-aperture/tests/unit/routes/what-sets-us-apart-test.js","vendor/ember-cli/tests-suffix.js"],"sourcesContent":["'use strict';\n","define('working-aperture/tests/app.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('ESLint | app');\n\n  QUnit.test('adapters/user.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'adapters/user.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('app.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'app.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('components/nav-bar/component.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'components/nav-bar/component.js should pass ESLint\\n\\n2:8 - \\'$\\' is defined but never used. (no-unused-vars)');\n  });\n\n  QUnit.test('components/portfolio-projects/component.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/portfolio-projects/component.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('components/site-footer/component.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/site-footer/component.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('controllers/recent-works.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/recent-works.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('models/user.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/user.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('resolver.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'resolver.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('router.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'router.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/index.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/index.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/order-options.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/order-options.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/recent-works.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/recent-works.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/what-sets-us-apart.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/what-sets-us-apart.js should pass ESLint\\n\\n');\n  });\n});","define('working-aperture/tests/helpers/destroy-app', ['exports'], function (exports) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = destroyApp;\n  function destroyApp(application) {\n    Ember.run(application, 'destroy');\n    if (window.server) {\n      window.server.shutdown();\n    }\n  }\n});","define('working-aperture/tests/helpers/module-for-acceptance', ['exports', 'qunit', 'working-aperture/tests/helpers/start-app', 'working-aperture/tests/helpers/destroy-app'], function (exports, _qunit, _startApp, _destroyApp) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n\n  exports.default = function (name) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    (0, _qunit.module)(name, {\n      beforeEach: function beforeEach() {\n        this.application = (0, _startApp.default)();\n\n        if (options.beforeEach) {\n          return options.beforeEach.apply(this, arguments);\n        }\n      },\n      afterEach: function afterEach() {\n        var _this = this;\n\n        var afterEach = options.afterEach && options.afterEach.apply(this, arguments);\n        return Ember.RSVP.resolve(afterEach).then(function () {\n          return (0, _destroyApp.default)(_this.application);\n        });\n      }\n    });\n  };\n});","define('working-aperture/tests/helpers/start-app', ['exports', 'working-aperture/app', 'working-aperture/config/environment'], function (exports, _app, _environment) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = startApp;\n  function startApp(attrs) {\n    var attributes = Ember.merge({}, _environment.default.APP);\n    attributes.autoboot = true;\n    attributes = Ember.merge(attributes, attrs); // use defaults, but you can override;\n\n    return Ember.run(function () {\n      var application = _app.default.create(attributes);\n      application.setupForTesting();\n      application.injectTestHelpers();\n      return application;\n    });\n  }\n});","define('working-aperture/tests/integration/components/nav-bar-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForComponent)('nav-bar', 'Integration | Component | nav bar', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"23Mh82eG\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[18,\\\"nav-bar\\\"],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"rwhJAS6T\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"nav-bar\\\",null,null,{\\\"statements\\\":[[0,\\\"      template block text\\\\n\\\"]],\\\"parameters\\\":[]},null],[0,\\\"  \\\"]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","// import { moduleForComponent, test } from 'ember-qunit';\n// import hbs from 'htmlbars-inline-precompile';\n\n// moduleForComponent('portfolio-projects', 'Integration | Component | portfolio projects', {\n//   integration: true\n// });\n\n// test('it renders', function(assert) {\n//   // Set any properties with this.set('myProperty', 'value');\n//   // Handle any actions with this.on('myAction', function(val) { ... });\n\n//   this.render(hbs`{{portfolio-projects}}`);\n\n//   assert.equal(this.$().text().trim(), '');\n\n//   // Template block usage:\n//   this.render(hbs`\n//     {{#portfolio-projects}}\n//       template block text\n//     {{/portfolio-projects}}\n//   `);\n\n//   assert.equal(this.$().text().trim(), 'template block text');\n// });\ndefine(\"working-aperture/tests/integration/components/portfolio-projects-test\", [], function () {\n  \"use strict\";\n});","define('working-aperture/tests/integration/components/site-footer-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForComponent)('site-footer', 'Integration | Component | site footer', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"PgFC8k9h\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[18,\\\"site-footer\\\"],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"tQJU+8sL\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"site-footer\\\",null,null,{\\\"statements\\\":[[0,\\\"      template block text\\\\n\\\"]],\\\"parameters\\\":[]},null],[0,\\\"  \\\"]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('working-aperture/tests/test-helper', ['working-aperture/app', 'working-aperture/config/environment', '@ember/test-helpers', 'ember-qunit'], function (_app, _environment, _testHelpers, _emberQunit) {\n  'use strict';\n\n  (0, _testHelpers.setApplication)(_app.default.create(_environment.default.APP));\n\n  (0, _emberQunit.start)();\n});","define('working-aperture/tests/tests.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('ESLint | tests');\n\n  QUnit.test('helpers/destroy-app.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/destroy-app.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('helpers/module-for-acceptance.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/module-for-acceptance.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('helpers/start-app.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/start-app.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/nav-bar-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/nav-bar-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/portfolio-projects-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/portfolio-projects-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/site-footer-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/site-footer-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('test-helper.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'test-helper.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/adapters/user-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/adapters/user-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/controllers/recent-works-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/controllers/recent-works-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/models/user-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/models/user-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/index-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/index-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/order-options-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/order-options-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/recent-works-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/recent-works-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/what-sets-us-apart-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/what-sets-us-apart-test.js should pass ESLint\\n\\n');\n  });\n});","define('working-aperture/tests/unit/adapters/user-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('adapter:user', 'Unit | Adapter | user', {\n    // Specify the other units that are required for this test.\n    // needs: ['serializer:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var adapter = this.subject();\n    assert.ok(adapter);\n  });\n});","define('working-aperture/tests/unit/controllers/recent-works-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('controller:recent-works', 'Unit | Controller | recent works', {\n    // Specify the other units that are required for this test.\n    needs: ['service:router-scroll']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var controller = this.subject();\n    assert.ok(controller);\n  });\n});","define('working-aperture/tests/unit/models/user-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForModel)('user', 'Unit | Model | user', {\n    // Specify the other units that are required for this test.\n    needs: []\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var model = this.subject();\n    // let store = this.store();\n    assert.ok(!!model);\n  });\n});","define('working-aperture/tests/unit/routes/index-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('route:index', 'Unit | Route | index', {\n    // Specify the other units that are required for this test.\n    needs: ['service:router-scroll']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('working-aperture/tests/unit/routes/order-options-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('route:order-options', 'Unit | Route | order options', {\n    // Specify the other units that are required for this test.\n    needs: ['service:router-scroll']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('working-aperture/tests/unit/routes/recent-works-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('route:recent-works', 'Unit | Route | recent works', {\n    // Specify the other units that are required for this test.\n    needs: ['service:router-scroll']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('working-aperture/tests/unit/routes/what-sets-us-apart-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('route:what-sets-us-apart', 'Unit | Route | what sets us apart', {\n    // Specify the other units that are required for this test.\n    needs: ['service:router-scroll']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","require('working-aperture/tests/test-helper');\nEmberENV.TESTS_FILE_LOADED = true;\n"],"names":[],"mappings":"AAAA;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC3BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC3BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzzEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;","file":"tests.js"}